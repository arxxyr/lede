kind: pipeline
type: docker
name: lean-cl
volumes:               # 定义存储
- name: cache
  host:
    path: /tmp/cache
steps:
- name: install && build
  image: ubuntu:22.04
  pull: always
  commands: 
    # - chmod +x cl.sh
    # - sh cl.sh
    - export FORCE_UNSAFE_CONFIGURE=1
    #clear
    - rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
    - apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
  
    - apt-get update
    # timezone
    - apt-get install -yq tzdata
    - ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    # - echo "Asia/Shanghai" > /etc/timezone
    # - rm -f /etc/localtime
    - dpkg-reconfigure -f noninteractive tzdata
    # prepare
    - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    - apt-get -yq install build-essential wget rsync curl asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib mkisofs p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
    - apt-get -y autoremove --purge
    - apt-get clean
    - df -h  
    # Update feeds
    - sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
    - ./scripts/feeds update -a
    - ./scripts/feeds install -a
    # Generate configuration file
    - git restore .config
    - make defconfig
    - make download -j8
    - find dl -size -1024c -exec rm -f {} \;
    - make -j$(nproc) || make -j1 V=s
    - echo "======================="
    - echo "Space usage:"
    - echo "======================="
    - df -h
    - echo "======================="
    - du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
    - du -h --max-depth=1 ./build_dir
    - du -h --max-depth=1 ./bin
    # package
    - mkdir -p /cache/firmware
    - mkdir -p /cache/package
    - mkdir -p /cache/buildinfo
    - rm -rf $(find ./bin/targets/ -type d -name "packages")
    - cp -rf $(find ./bin/targets/ -type f) /cache/firmware/
    - cp -rf $(find ./bin/packages/ -type f -name "*.ipk") /cache/package/
    - cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") /cache/buildinfo/
  volumes:                       # 定义容器挂载卷
  - name: cache
    path: /cache
trigger:
  branch:
    include:
      - master
  event:
    include:
      - push
